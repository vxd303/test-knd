name: Build OLLVM NDK Toolchain
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Patched AOSP Toolchain
    runs-on: ubuntu-22.04
    env:
      TMPDIR: ${{ github.workspace }}/.tmp
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    steps:
      # 0) Mở rộng dung lượng trống trên runner
      - name: Maximize free space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 512
          swap-size-mb: 1
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-docker-images: true

      - name: Show free space (before)
        run: df -h

      # 1) Checkout repo patcher (r23c)
      - name: Checkout OLLVM NDK Patcher repository
        uses: actions/checkout@v4
        with:
          repository: codetronik/ollvm-ndk
          ref: r25c
          path: patcher
          fetch-depth: 1

      # 2) Cài deps tối thiểu
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential ca-certificates cmake curl git ninja-build \
            python3 bison ccache xz-utils rsync jq
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      # 3) (tuỳ môi trường) libffi6 cho script cũ
      - name: Install libffi6 dependency
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
          sudo dpkg -i libffi6_3.2.1-8_amd64.deb || true
          rm -f libffi6_3.2.1-8_amd64.deb

      # 4) Repo tool mới nhất (tránh bản quá cũ)
      - name: Install latest repo tool
        run: |
          sudo curl -sSL https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod +x /usr/local/bin/repo
          repo --version || true

      # 5) Cấu hình Git và thư mục tạm/cache nằm trong workspace
      - name: Configure Git & prepare dirs
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          mkdir -p "$TMPDIR" "$CCACHE_DIR"

      # 6) repo init + sync (partial clone blobless; nếu fail thì fallback)
      - name: Initialize and Sync AOSP Toolchain Source
        run: |
          set -euxo pipefail
          mkdir aosp_toolchain_src
          cd aosp_toolchain_src
          repo init -u https://android.googlesource.com/platform/manifest -b llvm-toolchain
          cp ../patcher/manifest_8481493.xml .repo/manifests/
          repo init -m manifest_8481493.xml

          if repo sync -c \
              --no-clone-bundle \
              --no-tags \
              --optimized-fetch \
              --prune \
              --partial-clone \
              --clone-filter=blob:none \
              -j"$(nproc)"; then
            echo "Partial clone OK"
          else
            echo "Partial clone failed; fallback to normal slim sync"
            repo sync -c \
              --no-clone-bundle \
              --no-tags \
              --optimized-fetch \
              --prune \
              -j"$(nproc)"
          fi

      # 7) Overlay OLLVM (KHÔNG đè nguyên cây llvm/)
      - name: Apply OLLVM overlay (non-destructive)
        run: |
          set -euxo pipefail
          # Chỉ overlay thư mục Obfuscation (lib + include)
          rsync -a patcher/llvm/lib/Transforms/Obfuscation/ \
            aosp_toolchain_src/toolchain/llvm-project/llvm/lib/Transforms/Obfuscation/
          rsync -a patcher/llvm/include/llvm/Transforms/Obfuscation/ \
            aosp_toolchain_src/toolchain/llvm-project/llvm/include/llvm/Transforms/Obfuscation/

          # Bổ sung add_subdirectory(Obfuscation) nếu chưa có
          T="aosp_toolchain_src/toolchain/llvm-project/llvm/lib/Transforms/CMakeLists.txt"
          if ! grep -q 'add_subdirectory(Obfuscation)' "$T"; then
            echo 'add_subdirectory(Obfuscation)' >> "$T"
          fi

      # 8) Build tối thiểu (bỏ windows/darwin, skip package & runtimes)
      - name: Build AOSP LLVM (minimal)
        timeout-minutes: 360
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          ccache --max-size=2G || true
          python3 toolchain/llvm_android/build.py \
            --no-build=windows \
            --skip-package \
            --skip-runtimes
          ccache -s || true
          du -sh out || true
          df -h

       # 9) Dọn out/*, giữ mỗi stage2-install (để nhẹ đĩa)
      - name: Prune build outputs (keep stage2-install only)
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          if [ -d out ]; then
            find out -mindepth 1 -maxdepth 1 ! -name stage2-install -exec rm -rf {} +
          fi
          du -sh out || true
          df -h

      # 10) Xác định đường dẫn clang bin
      - name: Locate stage2 clang bin
        working-directory: ./aosp_toolchain_src/out
        run: |
          set -euxo pipefail
          if [ -d stage2-install/bin ]; then
            echo "CLANG_BIN=$PWD/stage2-install/bin" >> "$GITHUB_ENV"
            echo "Found: $PWD/stage2-install/bin"
            ls -l stage2-install/bin | sed 's/^/  /'
          else
            echo "ERROR: stage2-install/bin not found."
            echo "Candidates:"
            find . -maxdepth 3 -type d -name bin -printf '%p\n' | sed 's/^/  /'
            exit 1
          fi

      # 11) Đóng gói tối thiểu: chỉ file bắt đầu bằng 'clang' trong bin/
      - name: Package minimal clang binaries
        run: |
          set -euxo pipefail
          mkdir -p pkg/bin
          shopt -s nullglob
          cp -av "$CLANG_BIN"/clang* pkg/bin/
          tar -I 'xz -9e' -cf clang-minimal.tar.xz -C pkg .
          du -sh clang-minimal.tar.xz
          df -h

      # 12) Upload artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang-minimal-stage2
          path: clang-minimal.tar.xz
          retention-days: 7

      - name: Show free space (after)
        run: df -h
