name: Rebuild LLVM Pass plugin for host (glibc 2.35)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    # Pin Ubuntu 22.04 để glibc ~ 2.35 (khớp đa số máy/WSL hiện tại)
    runs-on: ubuntu-22.04

    env:
      # 1) Nếu bạn build từ repo khác:
      REPO_URL: https://github.com/LeadroyaL/llvm-pass-tutorial
      REPO_DIR: ${{ github.workspace }}/llvm-pass-tutorial
      # 2) Nếu plugin nằm ngay repo hiện tại, đặt:
      # REPO_DIR: ${{ github.workspace }}
      BUILD_DIR: ${{ github.workspace }}/build
      LLVM_HOME: /usr/lib/llvm-14

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Install toolchain (LLVM/Clang 14)
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14-dev clang-14 lld-14 cmake ninja-build git libunwind-dev

      - name: Clone plugin source (optional if external)
        run: |
          # Nếu plugin ở repo hiện tại, bỏ qua bước này và set REPO_DIR cho phù hợp
          git clone --depth=1 "$REPO_URL" "$REPO_DIR"
          ls -lah "$REPO_DIR"

      - name: Configure (CMake)
        run: |
          cmake -S "$REPO_DIR" -B "$BUILD_DIR" -G Ninja \
            -DLLVM_DIR="$LLVM_HOME/lib/cmake/llvm" \
            -DClang_DIR="$LLVM_HOME/lib/cmake/clang" \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang-14 \
            -DCMAKE_CXX_COMPILER=clang++-14 \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-Bstatic -lunwind -static-libstdc++ -static-libgcc -Wl,-Bdynamic"

      - name: Build
        run: |
          cmake --build "$BUILD_DIR" -v
          echo "Built .so files:"
          find "$BUILD_DIR" -name "*.so" -maxdepth 4 -print

      - name: Verify host deps (no libc++/libc++abi; glibc <= 2.35)
        run: |
          SO=$(find "$BUILD_DIR" -name "*.so" -maxdepth 4 | head -n1 || true)
          if [ -z "$SO" ]; then
            echo "No .so produced"; exit 1
          fi
          echo "Checking: $SO"
          ldd "$SO" || true
          echo "Required GLIBC versions inside .so:"
          strings -a "$SO" | grep -o 'GLIBC_[0-9.]*' | sort -V | uniq | tail -n5 || true

      - name: Upload artifact (.so)
        uses: actions/upload-artifact@v4
        with:
          name: host-plugin-so
          path: |
            ${{ env.BUILD_DIR }}/*.so
            ${{ env.BUILD_DIR }}/**/*.so
          if-no-files-found: error
